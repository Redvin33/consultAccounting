{
  "swagger": "2.0",
  "info": {
    "description": "REST API server for projects and workoutputs.",
    "version": "1.0.0",
    "title": "ConsultAccounting REST API"
  },
  "host": "localhost:8080",
  "tags": [
    {
      "name": "projects",
      "description": "project-related requests"
    },
    {
      "name": "workoutput",
      "description": "workoutput-related requests"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/projects/add": {
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Adds a new project to the database",
        "description": "",
        "operationId": "addProject",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Project object that needs to be added to the store",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation"
          },
          "400": {
            "description": "Bad request. Invalid type in some attribute"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Finds all projects from the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "404": {
            "description": "No projects found from database"
          }
        }
      }
    },
    "/projects/name/{name}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Find project by its name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "404": {
            "description": "Cant find project"
          }
        }
      }
    },
    "/projects/id/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Get project by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of project to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ProjectNotFoundException"
          }
        }
      }
    },
    "/projects/delete/{id}": {
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Deletes project by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Id cant be translated to integer"
          },
          "404": {
            "description": "Cant find project with provided id"
          }
        }
      }
    },
    "/projects/update": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Updates existing project",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid value in some field"
          },
          "404": {
            "description": "Cant find project"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/projects/workoutputs": {
      "get": {
        "tags": [
          "workoutput"
        ],
        "summary": "Returns all existing workoutputs from database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "404": {
            "description": "No workoutputs found"
          }
        }
      }
    },
    "/projects/{id}/workoutputs/add": {
      "post": {
        "tags": [
          "workoutput"
        ],
        "summary": "Adds a new WorkOutput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "WorkOutput",
            "in": "body",
            "description": "WorkOutput to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkOutput"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Object project's id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cant find project with id {id]"
          }
        }
      }
    },
    "/projects/workoutputs/delete/{id}": {
      "delete": {
        "tags": [
          "workoutput"
        ],
        "summary": "Deletes WorkOutput by its id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cant find project with id {id}"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Phase": {
      "type": "string",
      "enum": [
        "aloittamaton",
        "tarjous",
        "urakointi"
      ]
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "hourly_rate": {
          "type": "number"
        },
        "charged": {
          "type": "number"
        },
        "to_charge": {
          "type": "number"
        },
        "phase": {
          "type": {
            "$ref": "Phase"
          }
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "WorkOutput": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "pvm": {
          "type": "string",
          "format": "YYYY-MM-DD"
        },
        "hours": {
          "type": "number"
        },
        "project_id": {
          "type": "integer"
        },
        "paid": {
          "type": {
            "$ref": "Phase"
          }
        },
        "description": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}